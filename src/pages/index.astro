---
import Layout from '../layouts/Layout.astro';
import { getCollection, getEntry } from 'astro:content';
import type { CollectionEntry } from 'astro:content'; // Import CollectionEntry type
import ContentPanel from '../components/ContentPanel.astro';
import type { Props as ContentPanelProps } from '../components/ContentPanel.astro';
import AmazonBook from '../components/AmazonBook.astro'; // Re-add AmazonBook import
import amazonImageMap from '../data/amazonImageMap.json'; // Re-add amazonImageMap import
// import RenderHtml from '../components/RenderHtml.astro'; // Removed unused import

const rootIndex = await getEntry({
  collection: 'docs',
  id: '_index',
});

const allDocs = await getCollection('docs');

const topLevelContent = allDocs.filter((entry: CollectionEntry<'docs'>) => { // Explicitly type entry
  // Filter for top-level files and _index.md files within top-level folders
  if (!entry.data.slug) { // Changed to entry.data.slug
    console.warn(`Entry with id ${entry.id} has no slug.`);
    return false;
  }
  const slugParts = entry.data.slug.split('/'); // Changed to entry.data.slug
  const isTopLevelFile = slugParts.length === 1 && entry.data.slug !== '_index'; // Changed to entry.data.slug
  const isTopLevelSubfolderIndex = slugParts.length === 2 && slugParts[1] === '_index';
  return isTopLevelFile || isTopLevelSubfolderIndex;
}).map((entry: CollectionEntry<'docs'>): ContentPanelProps => { // Explicitly type entry
  const slugParts = entry.data.slug.split('/'); // Changed to entry.data.slug
  if (slugParts.length === 1) { // Top-level file
    return {
      title: entry.data.title as string,
      summary: (entry.data.summary ?? '') as string,
      mainImage: entry.data.mainImage as string | undefined,
      href: `/content/${entry.data.slug}`, // Changed to entry.data.slug
    };
  } else { // Top-level subfolder (_index.md inside a folder)
    const folderName = slugParts[0];
    return {
      title: entry.data.title as string,
      summary: (entry.data.summary ?? '') as string,
      mainImage: entry.data.mainImage as string | undefined,
      href: `/content/${folderName}/`,
    };
  }
});
---

<Layout>
  {rootIndex && rootIndex.rendered && rootIndex.rendered.html && (
    <Fragment set:html={rootIndex.rendered.html} />
  )}
  {!rootIndex || !rootIndex.rendered || !rootIndex.rendered.html && (
    <p>Error: Main content could not be loaded.</p>
  )}

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
    {topLevelContent.map((item) => (
      <ContentPanel
        title={item.title}
        summary={item.summary}
        mainImage={item.mainImage}
        href={item.href}
      />
    ))}
    {/* Keep AmazonBook if it's part of the original index.astro or _index.md content */}
    <AmazonBook amazonLink="https://www.amazon.com/dp/0197642292" imageId={amazonImageMap["0197642292"]} />
  </div>
</Layout>
