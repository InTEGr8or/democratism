---
import Layout from '../layouts/Layout.astro';
import type { CollectionEntry } from 'astro:content';
import AmazonBook from '../components/AmazonBook.astro';
import amazonImageMap from '../data/amazonImageMap.json';
import { getCollection, getEntry } from 'astro:content';
import ContentPanel from '../components/ContentPanel.astro';
import type { Props as ContentPanelProps } from '../components/ContentPanel.astro';

const rootIndex = await getEntry({
  collection: 'docs',
  id: '_index',
});

const allDocs = await getCollection('docs');

const topLevelContent = allDocs.filter((entry: CollectionEntry<'docs'>) => {
  // Filter for top-level files and _index.md files within top-level folders
  if (!entry.slug) {
    console.warn(`Entry with id ${entry.id} has no slug.`);
    return false;
  }
  const slugParts = entry.slug.split('/');
  const isTopLevelFile = slugParts.length === 1 && entry.slug !== '_index';
  const isTopLevelSubfolderIndex = slugParts.length === 2 && slugParts[1] === '_index';
  return isTopLevelFile || isTopLevelSubfolderIndex;
}).map((entry): ContentPanelProps => {
  const slugParts = entry.slug.split('/');
  if (slugParts.length === 1) { // Top-level file
    return {
      title: entry.data.title as string,
      summary: (entry.data.summary ?? '') as string,
      mainImage: entry.data.mainImage as string | undefined,
      href: `/content/${entry.slug}`,
    };
  } else { // Top-level subfolder (_index.md inside a folder)
    const folderName = slugParts[0];
    return {
      title: entry.data.title as string,
      summary: (entry.data.summary ?? '') as string,
      mainImage: entry.data.mainImage as string | undefined,
      href: `/content/${folderName}/`,
    };
  }
});
---

<Layout>
  {rootIndex && (async () => {
    const rendered = await (rootIndex as any).render(); // Cast to any for debugging
    console.log('Debug: rootIndex.rendered object:', rendered);
    if (rendered && rendered.Content) {
      return <rendered.Content />;
    } else {
      console.error('Error: rootIndex.rendered.Content is undefined or null.');
      return <p>Error: Main content could not be loaded.</p>;
    }
  })()}

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
    {topLevelContent.map((item) => (
      <ContentPanel
        title={item.title}
        summary={item.summary}
        mainImage={item.mainImage}
        href={item.href}
      />
    ))}
    <AmazonBook asin="0132350882" imageMap={amazonImageMap} />
  </div>
</Layout>
