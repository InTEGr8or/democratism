---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import ContentPanel from '../components/ContentPanel.astro';
import type { Props as ContentPanelProps } from '../components/ContentPanel.astro';
import { isFolderIndexEntry, getDirectChildren } from '../utils/content'; // Removed getFirstNWords

export async function getStaticPaths() {
  const allDocs = await getCollection('docs');

  return allDocs
    .filter(entry => (entry.data as any).slug && (entry.data as any).slug.length > 0)
    .map((entry) => ({
      params: { slug: (entry.data as any).slug },
      props: { entry },
    }));
}

const { entry } = Astro.props;

const isFolderIndex = isFolderIndexEntry(entry);
let childContent: ContentPanelProps[] = [];

if (isFolderIndex) {
  const allDocs = await getCollection('docs');
  childContent = getDirectChildren(entry, allDocs);
}
---

<Layout content={{ title: entry.data.title }}>
  <main>
    <h1>{entry.data.title}</h1>
    {/* Render the main content of the current entry */}
    {entry.rendered && entry.rendered.html && (
      <Fragment set:html={entry.rendered.html} />
    )}

    {/* If it's a folder index, display child panels */}
    {isFolderIndex && (
      <section class="mt-8">
        <h2 class="text-2xl font-bold mb-4">Contents in this section:</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {childContent.map((item: ContentPanelProps) => ( // Explicitly type item
            <ContentPanel
              title={item.title}
              summary={item.summary}
              mainImage={item.mainImage}
              href={item.href}
              excerpt={item.excerpt}
            />
          ))}
        </div>
      </section>
    )}
  </main>
</Layout>
