---
export const frontmatter = {};
/** @type {{ amazonLink: string, imageId?: string }} */
const { amazonLink, imageId } = Astro.props;

// Extract ASIN from the Amazon link
const asinMatch = amazonLink.match(/\/dp\/([A-Z0-9]{10})/);
const asin = asinMatch ? asinMatch[1] : null;

// Determine the image URL
let finalImageUrl = '';
if (imageId) {
  // Prioritize local image if imageId is provided
  finalImageUrl = `/images/enrichment/${imageId}.jpg`;
} else if (asin) {
  // Fallback to Amazon CDN using ASIN if no imageId, or if local image not found
  // This is a temporary fallback, ideally imageId would always be present after enrichment
  finalImageUrl = `https://m.media-amazon.com/images/I/${asin}._SY342_.jpg`;
}

// Extract book title from the link (fallback if not extractable)
const titleMatch = amazonLink.match(/\/([A-Za-z0-9-]+)\/dp\//);
const title = titleMatch ? titleMatch[1].replace(/-/g, ' ') : 'Book Title';
---

{asin ? (
  <a href={amazonLink} target="_blank" class="amazon-book">
    <img src={finalImageUrl} alt={title} />
    <h3>{title}</h3>
  </a>
) : (
  <p>Invalid Amazon link.</p>
)}

<style>
  .amazon-book {
    border: 1px solid #ccc;
    padding: 10px;
    display: flex;
    max-width: 200px;
    flex-direction: column;
    align-items: center;
    text-decoration: none;
    color: black;
  }
  .amazon-book img {
    max-width: 150px;
    height: auto;
  }
  .amazon-book h3 {
    margin-top: 10px;
    text-align: center;
  }
</style>